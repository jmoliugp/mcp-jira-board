# Project - Cursor Rules

## Project Overview

This is an MCP (Model Context Protocol) server that provides Jira board management functionality. The project allows users to create, list, and manage Jira boards through MCP tools, enabling AI assistants to interact with Jira programmatically.

### Core Functionality

- **Jira Board Management**: Create scrum/kanban boards, list existing boards, get board details
- **Project Management**: List and manage Jira projects
- **Filter Management**: List and manage Jira filters for board creation
- **MCP Integration**: Expose all Jira functionality as MCP tools for AI assistants

### Technical Stack

- **TypeScript**: Strict typing and modern JavaScript features
- **MCP SDK**: Model Context Protocol for AI tool integration
- **Axios**: HTTP client for Jira REST API calls
- **Performance Monitoring**: Execution timing and logging
- **Error Handling**: Comprehensive error handling and recovery

## Code Style & Standards

### TypeScript Patterns

- **Always use interfaces** for data structures, especially for scraped content
- **Proper typing is mandatory** - avoid `any` types
- **Use const assertions** where appropriate
- **Prefer async/await** over promises for readability

### Code Quality & Readability

- **Write clean, readable code** - prioritize clarity over cleverness
- **Keep cognitive complexity low** - break down complex functions into smaller, focused ones
- **Use descriptive variable names** - avoid abbreviations and single-letter variables
- **Avoid deep nesting** - use early returns and guard clauses
- **Comment complex logic** - explain the "why", not the "what"
- **Consistent formatting** - follow established patterns throughout the codebase
- **Handle errors gracefully** with try-catch blocks

### File Organization

- **Services directory** (`src/services/`) for modules with complex logic
- **Utils directory** (`src/utils/`) for shared utilities

### Naming Conventions

- **ALWAYS use English** for all comments, documentation, variable names, function names, and any code-related text
- **No Spanish** in code, comments, or documentation - everything must be in English
- **Use descriptive English names** for variables, functions, classes, and interfaces

### Development Approach

- **Plan first, then execute** - always create a detailed plan of changes before implementing
- **Seek approval before applying** - present the plan and wait for confirmation before making changes
- **Make granular changes** - implement one feature or fix at a time
- **Incremental development** - build features step by step, testing each component
- **Clear separation** - separate concerns between different modules and services

### Performance Tracking

- **Use performance.now()** for timing
- **Log execution time** with emoji (⏱️)
- **Monitor at function level** for each service
- **Format timing** to 2 decimal places

### Logging Standards

- **Use custom log utility** (`src/utils/log.ts`)
- **Emoji usage** only for most significant logs: start, success milestones, fatal errors, ⏱️ timing
- **Include context** in log messages

## Error Handling

### Exception Patterns

- **Try-catch** around individual post parsing
- **Continue processing** other posts if one fails
- **Log errors** with context and proper emojis
- **Null/undefined checks** before processing elements

### Process-Level Handling

- **Unhandled rejection** listeners in main
- **Uncaught exception** handlers
- **Exit with code 1** on fatal errors
- **Always use finally blocks** for resource cleanup

### Error Logging Best Practices

- **Include context** - what operation was being performed
- **Use proper error types** - check `error instanceof Error`
- **Provide actionable information** - not just generic messages
- **Distinguish between recoverable and fatal errors**

## Development Workflow

### Code Organization

- **Keep main function clean** - delegate to services
- **Proper imports** and exports
- **Consistent formatting** and indentation

### Testing Considerations

- **Console.log results** for debugging
- **Performance metrics** for optimization
- **Error scenarios** should be handled gracefully

### Core Stack

- **TypeScript** - strict typing and modern JavaScript features
- **Performance API** - execution timing and performance monitoring
- **Chalk** - colored logging output for better debugging
- **Custom utilities** - structured logging system

### Development Process

- **Modular architecture** - separate concerns
- **Clean interfaces** - define data contracts
- **Performance first** - monitor execution
- **Error resilience** - handle failures gracefully
- **Comprehensive logging** - track every operation

Remember: This project prioritizes clean, maintainable code with proper TypeScript typing, comprehensive error handling, and structured logging. Always test scrapers against live sites, handle layout changes gracefully, and maintain consistent logging patterns for debugging and monitoring.

// Project-Specific Code Style Preferences
// --------------------------------------
Separate code blocks with visible blank lines (double line breaks) instead of comment dividers. Do not use comment lines for separation. This improves readability and is the preferred style for this project.
